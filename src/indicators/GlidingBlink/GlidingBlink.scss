@use "sass:color";
@use "../../scss/variables" as defaults;

$animationDuration: var(--rli-animation-duration, 2s);
$animationFn: var(--rli-animation-function, linear);

$defaultR: color.red(defaults.$defaultColor);
$defaultG: color.green(defaults.$defaultColor);
$defaultB: color.blue(defaults.$defaultColor);
$blurAmount: 12px;
$maxOpacity: 1;
$percentIncStep: 10;

//  Invert a range of a scale
@function invertScale($value, $min: 0, $max: 1) {
  @return $max - $value + $min;
}

// Get step number closest to 50% mark in a percentage numberline
@function closestTo50($step: 10) {
  $number: 0;

  @while calc($number + $step) < 50 {
    $number: calc($number + $step);
  }

  @return $number;
}

$percentJustBelow50: closestTo50($percentIncStep);
// @debug "Number just Next to 50%: #{$percentJustBelow50}";

// Calculate opacity in the scale 0-1
// @function calcOpacity($shapeNum: 1, $progress: 0) {
//   $progress: abs($progress - ($shapeNum - 1) * $percentIncStep);

//   @if ($progress > 50) {
//     $progress: 100 - $progress;
//   }

//   $opacity: calc(($progress * 2) / 100);

//   @return $opacity;
// }
@function calcOpacity($shapeNum, $progress, $causeBlink: false) {
  // $opacity: calcOpacity($shapeNum, $progress);

  // Generate different progress values for each shape
  $progressPerShape: calc($progress + (($shapeNum - 1) * $percentIncStep));
  @debug "$progressPerShape:: #{$progressPerShape}";

  // @if ($opacity == 0) {
  //   @return 0.135;
  // }

  @if ($causeBlink == true) {
    // Cause blink to only when animation is almost at full opaqueness
    @if (($progressPerShape == $percentJustBelow50) and $progressPerShape < 50) {
      $opacity: 0;
      @debug "'progress per shape' #{$progressPerShape} == 'just below-50' #{$percentJustBelow50}, Opacity: #{$opacity}";
      @return $opacity;
    }
  }

  // Reset progress
  // so that after full opaqueness at 50%, now it heads to full transparency at 100%
  @if ($progressPerShape > 50) {
    $progressPerShape: abs(calc(100 - $progressPerShape));
  }

  $opacity: calc(($maxOpacity * $progressPerShape / 50)); // Ensures that we are at `1`, when progress is at 50%
  @debug "Shape num: #{$shapeNum}, Opacity: #{$opacity}, Progress: #{$progressPerShape}";

  // @return invertScale($opacity, 0, 1);
  @return $opacity;
}

// This causes a blink behavior in the opacity calculation
// @function blinkOpacity($shapeNum, $progress) {
//   $opacity: calcOpacity($shapeNum, $progress);

//   // Generate different progress values for each shape
//   $progressPerShape: calc($progress + (($shapeNum - 1) * $percentIncStep));
//   @debug "$progressPerShape:: #{$progressPerShape}";

//   // @if ($opacity == 0) {
//   //   @return 0.135;
//   // }

//   // Cause blink to only when animation is almost at full opaqueness
//   @if (($progressPerShape == $percentJustBelow50) and $progressPerShape < 50) {
//     $opacity: 0;
//     @debug "'progress per shape' #{$progressPerShape} == 'just below-50' #{$percentJustBelow50}, Opacity: #{$opacity}";
//     @return $opacity;
//   }

//   // Reset progress
//   // so that after full opaqueness at 50%, now it heads to full transparency at 100%
//   @if ($progressPerShape > 50) {
//     $progressPerShape: abs(calc(100 - $progressPerShape));
//   }

//   $opacity: calc(($maxOpacity * $progressPerShape / 50)); // Ensures that we are at `1`, when progress is at 50%
//   @debug "Shape num: #{$shapeNum}, Opacity: #{$opacity}, Progress: #{$progressPerShape}";

//   @return $opacity;
// }

// Adds css variables for the size of shape/boxes/bar
@function barWidth() {
  @return var(--bar-width);
}

// Adds css variables representing color
@function colBase($shapeNumber) {
  $cssVar: var(--color-base);

  @if ($shapeNumber) {
    $cssVar: var(--shape#{$shapeNumber}-color-base, var(--color-base));
  }

  @return $cssVar;
}

@mixin shapes($progress) {
  box-shadow: calc(barWidth() * 1.2) 0 invertScale(calcOpacity(1, $progress)) * $blurAmount
      rgba(colBase(1), calcOpacity(1, calc($progress), true)),
    calc(barWidth() * 2.4) 0 invertScale(calcOpacity(2, $progress)) * $blurAmount
      rgba(colBase(2), calcOpacity(2, calc($progress), true)),
    calc(barWidth() * 3.6) 0 invertScale(calcOpacity(3, $progress)) * $blurAmount
      rgba(colBase(3), calcOpacity(3, $progress, true)),
    calc(barWidth() * 4.8) 0 invertScale(calcOpacity(4, $progress)) * $blurAmount
      rgba(colBase(4), calcOpacity(4, $progress, true)),
    calc(barWidth() * 6) 0 invertScale(calcOpacity(5, $progress)) * $blurAmount
      rgba(colBase(5), calcOpacity(5, $progress, true));
  // calc(barWidth() * 7.2) 0 invertScale(calcOpacity(6, $progress)) * $blurAmount
  //   rgba(colBase(6), calcOpacity(6, $progress, true));
}

.gliding-blink-rli-bounding-box {
  --color-base: #{$defaultR}, #{$defaultG}, #{$defaultB};

  font-size: defaults.$fontSizer;
  color: rgb(var(--color-base));

  .gliding-blink-indicator {
    --bar-width: 2em;

    // create stacking context
    isolation: isolate;

    width: 15.75em;
    height: 3em;
    position: relative;
    color: currentColor;

    .gliding-blink-text {
      position: absolute;
      top: 105%;
      left: 50%;
      transform: translateX(-50%);
      color: currentColor;
      font-size: 0.7em;
      // font-weight: 600;
    }

    .gliding-blink-shape {
      position: absolute;
      top: 50%;
      left: calc(var(--bar-width) * -1);
      display: block;
      width: var(--bar-width);
      height: calc(var(--bar-width) / 0.8);

      border-radius: 4px;
      background-color: transparent;

      transform: skewX(-20deg) translateY(-50%);

      @include shapes(58);

      animation: glidingBlinkGlide $animationDuration $animationFn infinite;
    }
  }
}

@keyframes glidingBlinkGlide {
  $progress: 0%;

  @while $progress <= 100% {
    @debug "progress at: #{$progress}";

    $progressTrack: calc($progress / 1%);

    // @progress `40%`, opacity would be `0.8`. But instead cause opacity to be `1`.
    // But don't set the $progress var so that at `50%`, opacity is `1` again.
    // $causeBlinkAt: 20%; // should be a multiple of 10 and below 50
    // @if ($progress >= $causeBlinkAt and $progress < 50%) {
    //   @if ($progress == $causeBlinkAt) {
    //     $progressTrack: 50; // makes opacity to be 1
    //   } @else {
    //     $progressTrack: calc(($progress - $causeBlinkAt) / 1%);
    //   }
    // }

    #{$progress} {
      @include shapes($progressTrack);
    }

    $progress: calc($progress + $percentIncStep * 1%);
  }
}
