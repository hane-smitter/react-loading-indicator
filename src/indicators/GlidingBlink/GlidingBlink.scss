@use "sass:color";
@use "../../scss/variables" as defaults;

$animationDuration: var(--rli-animation-duration, 2s);
$animationFn: var(--rli-animation-function, linear);

$defaultR: color.red(defaults.$defaultColor);
$defaultG: color.green(defaults.$defaultColor);
$defaultB: color.blue(defaults.$defaultColor);
$blurAmount: 15px;
$maxOpacity: 1;
$percentIncStep: 10;
$noOfShapes: 5;
$shapeWidth: 2em;
$shapeSpacing: 0.4em;

//  Invert a range of a scale
@function invertScale($value, $min: 0, $max: 1) {
  @return $max - $value + $min;
}

// Get step number closest to 50% mark in a percentage numberline
@function closestTo50($step: 10) {
  $number: 0;

  @while calc($number + $step) < 50 {
    $number: calc($number + $step);
  }

  @return $number;
}
$percentJustBelow50: closestTo50($percentIncStep);

@function calcOpacity($shapeNum, $progress, $causeBlink: false) {
  // Generate different progress values for each shape
  $progressPerShape: calc($progress + (($shapeNum - 1) * $percentIncStep));

  // Causes a blink behavior in the opacity calculation
  @if ($causeBlink == true) {
    // Set opacity to `0` to cause blink, when animation is almost at full opaqueness
    @if (($progressPerShape == $percentJustBelow50) and $progressPerShape < 50) {
      $opacity: 0;
      @return $opacity;
    }
  }

  // Reset progress
  // so that after full opaqueness at 50%, now it heads to full transparency at 100%
  @if ($progressPerShape > 50) {
    $progressPerShape: abs(calc(100 - $progressPerShape));
  }

  // Ensures that we are at `1`, when progress is at 50%
  $opacity: calc(($maxOpacity * $progressPerShape / 50));

  @return $opacity;
}

// Return css variables representing color
@function colBase($shapeNumber) {
  $cssVar: var(--color-base);

  @if ($shapeNumber) {
    $cssVar: var(--shape#{$shapeNumber}-color-base, var(--color-base));
  }

  @return $cssVar;
}

@mixin shapes($progress) {
  $placementX: calc($shapeWidth + $shapeSpacing);

  box-shadow: calc($placementX * 1) 0 calc(invertScale(calcOpacity(5, $progress)) * $blurAmount)
      rgba(colBase(1), calcOpacity(5, $progress, true)),
    calc($placementX * 2) 0 calc(invertScale(calcOpacity(4, $progress)) * $blurAmount)
      rgba(colBase(2), calcOpacity(4, $progress, true)),
    calc($placementX * 3) 0 calc(invertScale(calcOpacity(3, $progress)) * $blurAmount)
      rgba(colBase(3), calcOpacity(3, $progress, true)),
    calc($placementX * 4) 0 calc(invertScale(calcOpacity(2, $progress)) * $blurAmount)
      rgba(colBase(4), calcOpacity(2, $progress, true)),
    calc($placementX * 5) 0 calc(invertScale(calcOpacity(1, $progress)) * $blurAmount)
      rgba(colBase(5), calcOpacity(1, $progress, true));
  // calc($placementX * 6) 0 invertScale(calcOpacity(6, $progress)) * $blurAmount
  //   rgba(colBase(6), calcOpacity(6, $progress, true));
}

.gliding-blink-rli-bounding-box {
  --color-base: #{$defaultR}, #{$defaultG}, #{$defaultB};

  font-size: defaults.$fontSizer;
  color: rgb(var(--color-base));

  .gliding-blink-indicator {
    // create stacking context
    isolation: isolate;

    // width: 15.75em;
    width: calc($noOfShapes * $shapeWidth + $noOfShapes * $shapeSpacing);
    height: calc($shapeWidth + 1em);
    position: relative;
    color: currentColor;

    // .gliding-blink-text {
    //   position: absolute;
    //   top: 105%;
    //   left: 50%;
    //   transform: translateX(-50%);
    //   color: currentColor;
    //   font-size: 0.7em;
    //   font-weight: 600;
    // }

    .gliding-blink-shape {
      position: absolute;
      top: 50%;
      // left: calc($shapeWidth * -1);
      display: block;
      width: $shapeWidth;
      height: calc($shapeWidth / 0.8);

      border-radius: 4px;
      background-color: transparent;

      transform: skewX(-20deg) translate(-100%, -50%);

      @include shapes(10);

      animation: glidingBlinkGlide $animationDuration $animationFn infinite;
    }
  }
}

@keyframes glidingBlinkGlide {
  $progress: 0%;

  @while $progress <= 100% {
    @debug "progress at: #{$progress}";

    $progressTrack: calc($progress / 1%);

    #{$progress} {
      @include shapes($progressTrack);
    }

    $progress: calc($progress + $percentIncStep * 1%);
  }
}
