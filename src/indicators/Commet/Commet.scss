@use "../../scss/variables" as defaults;

$spinCommetDuration: 1.8s;
$bolus-size: 0.4667em;
$commet-path-width: 0.2em;

@function stripUnit($value) {
    @if type-of($value) == "number" and not unitless($value) {
        @return $value / ($value * 0 + 1);
    }

    @return $number;
}

@function diffRatio($borderWidth, $bolusSize) {
    $borderWidth: stripUnit($borderWidth);
    $bolusSize: stripUnit($bolusSize);

    $value: calc(abs($borderWidth - $bolusSize));

    @return $value;
}

@mixin glow {
    box-shadow: 0 0 0.3em 0.03em var(--bg-color), 0 0 1.4em 0.16em var(--bg-color);
}

.commet-bounding-box {
    font-size: defaults.$fontSizer;
    display: inline-block;
    box-sizing: border-box;

    .commet-loader {
        width: 4em;
        height: 4em;
        color: defaults.$defaultColor;
        display: flex;
        align-items: center;
        justify-content: center;

        // Create stacking context
        position: relative;
        z-index: 0;

        .commet-text {
            mix-blend-mode: difference;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);

            z-index: -2;
        }

        .ring-wrapper {
            position: absolute;
            width: var(--ring-dimensions);
            height: var(--ring-dimensions);
            animation: spinCommet $spinCommetDuration cubic-bezier(0.08, 0.03, 0.91, 0.93) infinite;

            & > .ringball-holder {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                background-color: transparent;
            }

            & .ring {
                border-radius: 50%;
                border-style: solid;
                position: absolute;
                // width: 100%;
                // height: 100%;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
            }

            &.ring1 {
                --bg-color: var(--ring1-color, currentColor);
                --ring-dimensions: 100%;

                animation-direction: normal;

                & > .ring {
                    border-color: var(--bg-color) transparent transparent var(--bg-color);
                    border-width: $commet-path-width $commet-path-width 0em 0em;
                    transform: rotateZ(-44deg);
                }

                & > .ringball-holder::before {
                    content: "";
                    position: absolute;
                    width: $bolus-size;
                    height: $bolus-size;
                    top: calc($commet-path-width * diffRatio($commet-path-width, $bolus-size) * -1);
                    left: 50%;
                    // transform: translateX(-50%);
                    background-color: var(--bg-color);
                    border-radius: 50%;

                    @include glow();
                }
            }
            &.ring2 {
                --bg-color: var(--ring2-color, currentColor);
                --ring-dimensions: 70%;

                animation-direction: reverse;
                & > .ring {
                    border-color: var(--bg-color) var(--bg-color) transparent transparent;
                    border-width: $commet-path-width 0em 0em $commet-path-width;
                    transform: rotateZ(134deg);
                }

                & > .ringball-holder {
                    &::before {
                        content: "";
                        position: absolute;
                        width: $bolus-size;
                        height: $bolus-size;
                        right: calc($commet-path-width * diffRatio($commet-path-width, $bolus-size) * -1);
                        // right: 0;
                        // left: 50%;
                        bottom: 50%;
                        // transform: translateX(-50%);
                        background-color: var(--bg-color);
                        border-radius: 50%;

                        @include glow();
                    }
                }
            }
        }
    }
}
@keyframes spinCommet {
    to {
        transform: rotate(1turn);
    }
}
