@use "../../scss/variables" as defaults;

$trophyAnimDuration: var(--rli-animation-duration, 2.5s);
$animationFn: var(--rli-animation-function, linear);

$trophyBladeWidth: 4em;
$bladePlayDuration: $trophyAnimDuration;
$bladeBgPlayDuration: calc($trophyAnimDuration * 0.5);

.trophy-spin-rli-bounding-box {
  box-sizing: border-box;
  font-size: defaults.$fontSizer;
  position: relative;
  isolation: isolate;
  color: defaults.$defaultColor;

  .trophy-spin-indicator {
    width: $trophyBladeWidth;
    perspective: 1000px;
    display: block;
    margin: 0 auto;
    // animation: trophyRotate360 $trophyAnimDuration $animationFn infinite;

    .blade {
      display: block;
      width: $trophyBladeWidth;
      height: calc($trophyBladeWidth / 8);
      background: currentColor;
      animation: trophyBlade $bladePlayDuration $animationFn infinite, bgPlay $bladeBgPlayDuration $animationFn infinite;

      &:not(:last-of-type) {
        margin-bottom: 0.06em;
      }

      &:nth-child(8) {
        // animation-delay: 0s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 0 * -1);
      }
      &:nth-child(7) {
        // animation-delay: -0.25s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 1 * -1);
      }
      &:nth-child(6) {
        // animation-delay: -0.5s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 2 * -1);
      }
      &:nth-child(5) {
        // animation-delay: -0.75s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 3 * -1);
      }
      &:nth-child(4) {
        // animation-delay: -1s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 4 * -1);
      }
      &:nth-child(3) {
        // animation-delay: -1.25s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 5 * -1);
      }
      &:nth-child(2) {
        // animation-delay: -1.5s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 6 * -1);
      }
      &:nth-child(1) {
        // animation-delay: -1.75s;
        animation-delay: calc(($bladePlayDuration / 2) / 8 * 7 * -1);
      }
    }
  }

  .trophy-spin-text {
    color: currentColor;
    mix-blend-mode: difference;

    position: absolute;
    top: 105%;
    left: 50%;
    transform: translateX(-50%);

    z-index: -2;
  }
}

@keyframes trophyBlade {
  from {
    transform: rotateY(0deg) rotateX(-20deg);
  }
  to {
    transform: rotateY(360deg) rotateX(-20deg);
  }
}

@keyframes bgPlay {
  0% {
    filter: brightness(1);
    // opacity: 1;
  }
  50% {
    filter: brightness(0.59);
    // opacity: 1;
  }
  51% {
    filter: opacity(0.5);
    // opacity: 1;
  }
  70% {
    filter: opacity(0.7);
    // opacity: 1;
  }
  100% {
    // filter: brightness(1);
    filter: opacity(1);
    // opacity: 1;
  }
}

// @keyframes trophyRotate360 {
//   from {
//     transform: rotate(0deg);
//   }
//   to {
//     transform: rotate(360deg);
//   }
// }
