@use "sass:color";
@use "../../scss/variables" as defaults;

$defaultColorRedChannel: color.red(defaults.$defaultColor);
$defaultColorGreenChannel: color.green(defaults.$defaultColor);
$defaultColorBlueChannel: color.blue(defaults.$defaultColor);

$atomSpinDuration: var(--rli-animation-duration, 1.8s); // ratio -> 0.2625(2.1 / 8)
$atomSpinPathDuration: calc($atomSpinDuration / 0.2625);
$animationFn: var(--rli-animation-function, linear);

$colorInversionDegree: 200; // 0 - 255

.atom-rli-bounding-box {
  --color-r: #{$defaultColorRedChannel};
  --color-g: #{$defaultColorGreenChannel};
  --color-b: #{$defaultColorBlueChannel};

  font-size: defaults.$fontSizer;
  position: relative;
  color: rgb(var(--color-r), var(--color-g), var(--color-b));
  text-align: unset;

  // Create stacking context
  isolation: isolate;

  .atom-throbber {
    $box-width: 5em;
    $box-height: 5em;

    // create stacking context + relative positioning
    position: relative;
    z-index: 1;

    width: $box-width;
    height: $box-height;
    transform: perspective(500px) rotateX(-24deg) rotateY(20deg) rotateZ(30deg);
    transform-style: preserve-3d;

    & .inner {
      width: 100%;
      height: 100%;
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
      animation: atomSpin $atomSpinDuration $animationFn infinite;
      display: inline-block;
      transform-origin: center center;
      position: relative;

      & .disc:nth-of-type(1) {
        --disc-color: var(--disc3-color);
        animation: rotate $atomSpinPathDuration $animationFn infinite;
      }
      & .disc:nth-of-type(2) {
        --disc-color: var(--disc2-color);
        animation: rotateAtomDisc2 $atomSpinPathDuration $animationFn infinite;
      }
      & .disc:nth-of-type(3) {
        --disc-color: var(--disc1-color);
        animation: rotateAtomDisc3 $atomSpinPathDuration $animationFn infinite;
      }

      $disc-border-width: 0.3em;
      & .disc {
        position: absolute;
        // width: 100%;
        // height: 98%;
        border-radius: 50%;
        border: $disc-border-width solid var(--disc-color, currentColor);
        display: inline-block;
        top: 0;
        left: 0;
        right: 0;
        bottom: 2%;
      }

      & .disc.nucleus-holder {
        // width: $box-width;
        // height: $box-height;
        border: $disc-border-width solid transparent;

        & .nucleus {
          $nucleus-dimension: 0.8em;
          --color-invert-r: calc(#{$colorInversionDegree} - var(--color-r));
          --color-invert-g: calc(#{$colorInversionDegree} - var(--color-g));
          --color-invert-b: calc(#{$colorInversionDegree} - var(--color-b));

          position: absolute;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          width: $nucleus-dimension;
          height: $nucleus-dimension;
          display: inline-block;
          border-radius: 50%;
          background-color: currentColor;
          // box-shadow: inset 0 0 calc($nucleus-dimension / 6) #fff,
          //   inset calc($nucleus-dimension / 6) 0 calc($nucleus-dimension / 3.75) #f0f,
          //   inset calc($nucleus-dimension / 6 * -1) 0 calc($nucleus-dimension / 3.75) #0ff,
          //   inset calc($nucleus-dimension / 6) 0 $nucleus-dimension #f0f,
          //   inset calc($nucleus-dimension / 6 * -1) 0 $nucleus-dimension #0ff, 0 0 calc($nucleus-dimension / 6) #fff,
          //   calc($nucleus-dimension / 30 * -1) 0 calc($nucleus-dimension / 3.75) #f0f,
          //   calc($nucleus-dimension / 30) 0 calc($nucleus-dimension / 3.75) #0ff;
          box-shadow: inset 0 0 calc($nucleus-dimension / 6) rgba(var(--color-r), var(--color-g), var(--color-b), 0.16),
            inset calc($nucleus-dimension / 6) 0 calc($nucleus-dimension / 3.75)
              rgb(var(--color-invert-r), var(--color-invert-g), var(--color-invert-b), 1),
            inset calc($nucleus-dimension / 6 * -1) 0 calc($nucleus-dimension / 3.75)
              rgb(var(--color-invert-g), var(--color-invert-r), var(--color-invert-b), 1),
            inset calc($nucleus-dimension / 6) 0 $nucleus-dimension
              rgb(var(--color-invert-r), var(--color-invert-g), var(--color-invert-b), 1),
            inset calc($nucleus-dimension / 6 * -1) 0 $nucleus-dimension
              rgb(var(--color-invert-g), var(--color-invert-r), var(--color-invert-b), 1),
            0 0 calc($nucleus-dimension / 6) rgba(var(--color-r), var(--color-g), var(--color-b), 0.16),
            calc($nucleus-dimension / 30 * -1) 0 calc($nucleus-dimension / 1.35)
              rgb(var(--color-invert-r), var(--color-invert-g), var(--color-invert-b), 0.44),
            calc($nucleus-dimension / 30) 0 calc($nucleus-dimension / 1.35)
              rgb(var(--color-invert-g), var(--color-invert-r), var(--color-invert-b), 0.44);
        }
      }
    }
  }

  .atom-text {
    color: currentColor;
    mix-blend-mode: difference;
    width: unset;
    display: block;
  }
}

/* @keyframes spin-atom {
  0% {
    transform: rotateX(360deg) rotateY(0deg);
  }
  100% {
    transform: rotateX(0deg) rotateY(360deg);
  }
} */
@keyframes atomSpin {
  to {
    transform: rotate(1turn);
  }
}

@keyframes rotateAtomDisc2 {
  from {
    transform: rotateX(90deg) rotateZ(0deg);
  }
  to {
    transform: rotateX(90deg) rotateZ(360deg);
  }
}
@keyframes rotateAtomDisc3 {
  from {
    transform: rotateY(90deg) rotateZ(0deg);
  }
  to {
    transform: rotateY(90deg) rotateZ(360deg);
  }
}
