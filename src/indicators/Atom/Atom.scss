@use "sass:color";
@use "sass:string";
@use "../../scss/variables" as defaults;

$atomSpinDuration: var(
	--rli-animation-duration,
	1.8s
); // ratio -> 0.2625(2.1 / 8)
$atomSpinPathDuration: calc($atomSpinDuration / 0.2625);
$animationFn: var(--rli-animation-function, linear);

// ------------------------------------------------------------------------------------------------------------------
// @function atomColorPhase($num: null) {
// 	$cssVar: var(--atom-phase1-color);

// 	@if ($num and $num != 1) {
// 		$cssVar: var(--atom-phase#{$num}-color, $cssVar);
// 	}

// 	@return $cssVar;
// }
@function RGBVarChannels($phaseNum: null, $alpha: 1) {
	// $rgb: rgb(
	// 	var(--atom-channel-r),
	// 	var(--atom-channel-g),
	// 	var(--atom-channel-b),
	// 	$alpha
	// );
	$rgbColor: rgb(var(--atom-phase1-rgb), $alpha);

	@if ($phaseNum and $phaseNum != 1) {
		$rgbColor: rgb(
			var(--atom-phase#{$phaseNum}-rgb, var(--atom-phase1-rgb)),
			$alpha
		);
	}

	@return $rgbColor;
}

// -- NEW INDICATOR VARS
$atomWidth: 18.75em;
$atomHeight: $atomWidth;

// $atomColor: goldenrod;
$atomColor: defaults.$defaultColor;
$defaultColorRedChannel: color.red($atomColor);
$defaultColorGreenChannel: color.green($atomColor);
$defaultColorBlueChannel: color.blue($atomColor);

$nucleusGlow: string.unique-id();
$electronSpinAnimation: string.unique-id();
$orbitSpinAnimation: string.unique-id();

.atom-rli-bounding-box {
	// --atom-channel-r: #{$defaultColorRedChannel};
	// --atom-channel-g: #{$defaultColorGreenChannel};
	// --atom-channel-b: #{$defaultColorBlueChannel};
	--atom-phase1-rgb: #{$defaultColorRedChannel}, #{$defaultColorGreenChannel},
		#{$defaultColorBlueChannel};

	// --atom-phase1-color: #{RGBVarChannels()};

	color: RGBVarChannels();
	font-size: defaults.$fontSizer;
	position: relative;
	text-align: unset;

	// Create stacking context
	isolation: isolate;

	.atom-indicator {
		// create stacking context + relative positioning
		// position: relative;
		// z-index: 1;

		// width: $box-width;
		// height: $box-height;
		width: $atomWidth;
		height: $atomHeight;

		position: relative;
		/*  transform-style: preserve-3d; */
		// perspective: 31.25em;
		perspective: 18.75em;
		overflow: hidden;
		color: RGBVarChannels();

		// -- DEBUGGING BLOCK start -> For DEBUGGING
		// background-color: bisque;
		background-color: #221122;
		// -- DEBUGGING BLOCK end --

		// nucleus
		&::after,
		&::before {
			$dimension: calc($atomWidth * 0.08); // 18px

			content: "";
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			width: $dimension;
			height: $dimension;
			margin: auto;
			border-radius: 50%;

			background-color: currentColor;
		}
		&::before {
			filter: blur(2px) drop-shadow(0px 0px 0.375em currentColor)
				drop-shadow(0px 0px 0.75em currentColor);
			animation: $nucleusGlow 2s linear infinite;
		}

		.electron-orbit {
			$dimension: calc($atomWidth * 0.8);

			color: RGBVarChannels(null, 0.85);
			border: 0;
			border-left: 0.5em solid currentColor;
			box-sizing: border-box;
			position: absolute;
			top: 0;
			right: 0;
			bottom: 0;
			left: 0;
			margin: auto;
			width: $dimension;
			height: $dimension;
			background-color: transparent;
			border-radius: 50%;
			transform-style: preserve-3d;

			animation: 2s linear infinite $orbitSpinAnimation;

			// -- DEBUGGING BLOCK start -- Below is for debugging
			transition: transform 4s linear;
			// -- DEBUGGING BLOCK end --

			// Orbit track
			&::after {
				content: "";
				position: absolute;
				top: 0;
				right: 0;
				bottom: 0;
				left: 0;
				border-radius: 50%;
				color: RGBVarChannels(null, 0.18);
				border: 0.125em solid currentColor;
			}

			// electron
			&::before {
				$dimension: calc($atomWidth * 0.032);

				content: "";
				width: $dimension;
				height: $dimension;
				position: absolute;
				border-radius: 50%;
				top: calc($dimension * 0.5 * -1);
				right: 0;
				bottom: 0;
				left: 0;
				margin: 0 auto;
				color: RGBVarChannels();
				box-shadow:
					0px 0px 0.125em 0.0625em currentColor,
					0px 0px 1.25em 0.125em currentColor;
				background-color: currentColor;
				transform: rotateY(-70deg);
				animation: 2s linear infinite $electronSpinAnimation;
			}

			&:nth-of-type(1) {
				--orbit-vector-factor: -1;

				transform: rotateY(65deg)
					rotateX(calc(54deg * var(--orbit-vector-factor)));

				// animation-delay: 1s;
				// &::before {
				//   animation-delay: 1s;
				// }
			}
			&:nth-of-type(2) {
				--orbit-vector-factor: 1;

				transform: rotateY(65deg)
					rotateX(calc(54deg * var(--orbit-vector-factor)));

				// animation-delay: -1s;
				// &::before {
				//   animation-delay: -1s;
				// }
			}
			&:nth-of-type(3) {
				--orbit-vector-factor: 0;

				transform: rotateY(65deg)
					rotateX(calc(54deg * var(--orbit-vector-factor)));
				animation-duration: 1.5s;
				&::before {
					animation-duration: 1.5s;
				}
			}
		}
	}

	.atom-text {
		color: currentColor;
		mix-blend-mode: difference;
		width: unset;
		display: block;
	}
}

@keyframes #{$orbitSpinAnimation} {
	from {
		transform: rotateY(70deg) rotateX(calc(54deg * var(--orbit-vector-factor)))
			rotateZ(0deg);
	}
	to {
		transform: rotateY(70deg) rotateX(calc(54deg * var(--orbit-vector-factor)))
			rotateZ(360deg);
	}
}
@keyframes #{$electronSpinAnimation} {
	from {
		transform: rotateY(-70deg) rotateX(0deg);
	}
	to {
		transform: rotateY(-70deg) rotateX(-360deg);
	}
}
@keyframes #{$nucleusGlow} {
	100%,
	0% {
		opacity: 1;
	}
	50% {
		opacity: 0.2;
	}
}
