@use "../../scss/variables" as defaults;

$animationDuration: var(--rli-animation-duration, 1.5s);
$animationFn: var(--rli-animation-function, ease-in-out);
$interval: var(--mosaic-skip-interval, 0.1s);
$colorVarsNum: 4; // Number of coloring variables

@function mosaicColorVar($num: null) {
	$cssVar: var(--mosaic-phase1-color);

	@if ($num and $num != 1) {
		$cssVar: var(--mosaic-phase#{$num}-color, $cssVar);
	}

	@return $cssVar;
}

.mosaic-rli-bounding-box {
  --mosaic-phase1-color: #{defaults.$defaultColor};

  box-sizing: border-box;
  font-size: defaults.$fontSizer;
  color: mosaicColorVar();

  .mosaic-throbber {
    width: 5em;
    height: 5em;
    color: currentColor;
    display: grid;
    gap: 0.125em;
    grid-template-columns: repeat(3, 1fr);
    grid-template-areas:
      "a b c"
      "d e f"
      "g h i";

    //create stacking context
    position: relative;
    z-index: 0;

    .mosaic-cube-text {
      mix-blend-mode: difference;
      // filter: invert(1);

      position: absolute;
      top: 105%;
      left: 50%;
      transform: translateX(-50%);

      z-index: -2;
    }

    .mosaic-cube {
      background-color: mosaicColorVar();

      animation-name: mosaicAnimate, mosaicColoring;
      animation-duration: $animationDuration, calc($animationDuration * $colorVarsNum);
      animation-timing-function: $animationFn;
      animation-iteration-count: infinite;
    }

    .mosaic-cube1 {
      animation-delay: calc($interval * 2);
      grid-area: a;
    }
    .mosaic-cube2 {
      animation-delay: calc($interval * 3);
      grid-area: b;
    }
    .mosaic-cube3 {
      grid-area: c;
      animation-delay: calc($interval * 4);
    }
    .mosaic-cube4 {
      grid-area: d;
      animation-delay: calc($interval * 1);
    }
    .mosaic-cube5 {
      grid-area: e;
      animation-delay: calc($interval * 2);
    }
    .mosaic-cube6 {
      grid-area: f;
      animation-delay: calc($interval * 3);
    }
    .mosaic-cube7 {
      grid-area: g;
      animation-delay: 0s;
    }
    .mosaic-cube8 {
      grid-area: h;
      animation-delay: calc($interval * 1);
    }
    .mosaic-cube9 {
      grid-area: i;
      animation-delay: calc($interval * 2);
    }
  }
}

@keyframes mosaicAnimate {
  0%,
  60%,
  100% {
    // transform: scale(1, 1);
    transform: scale3D(1, 1, 1);
  }
  30% {
    // transform: scale(0, 0);
    transform: scale3D(0, 0, 1);
  }
}

// ðŸ‘‡ Added via JS for better cross-browser support
//
// @property mosaicColorVar(1) {
//   syntax: "<color>";
//   inherits: true;
//   initial-value: defaults.$defaultColor;
// }
// @property mosaicColorVar(2) {
//   syntax: "<color>";
//   inherits: true;
//   initial-value: defaults.$defaultColor;
// }
// @property mosaicColorVar(3) {
//   syntax: "<color>";
//   inherits: true;
//   initial-value: defaults.$defaultColor;
// }
// @property mosaicColorVar(4) {
//   syntax: "<color>";
//   inherits: true;
//   initial-value: defaults.$defaultColor;
// }

@keyframes mosaicColoring {
  100%,
  0% {
    background-color: mosaicColorVar(1);
  }
  25% {
    background-color: mosaicColorVar(2);
  }
  50% {
    background-color: mosaicColorVar(3);
  }
  75% {
    background-color: mosaicColorVar(4);
  }
}
