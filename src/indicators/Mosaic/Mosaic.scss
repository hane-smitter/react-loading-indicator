@use "../../scss/variables" as defaults;

$animationDuration: var(--rli-animation-duration, 1.3s);
$animationFn: var(--rli-animation-function, ease-in-out);
$interval: var(--mosaic-skip-interval, 0.1s);

.mosaic-rli-bounding-box {
  box-sizing: border-box;
  font-size: defaults.$fontSizer;
  color: defaults.$defaultColor;

  .mosaic-throbber {
    width: 5em;
    height: 5em;
    color: currentColor;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-areas:
      "a b c"
      "d e f"
      "g h i";

    //create stacking context
    position: relative;
    z-index: 0;

    .mosaic-cube-text {
      mix-blend-mode: difference;
      // filter: invert(1);

      position: absolute;
      top: 105%;
      left: 50%;
      transform: translateX(-50%);

      z-index: -2;
    }

    .mosaic-cube {
      background-color: currentColor;

      animation-name: mosaicAnimate;
      animation-duration: $animationDuration;
      animation-timing-function: $animationFn;
      animation-iteration-count: infinite;
    }

    .mosaic-cube1 {
      animation-delay: calc($interval * 2);
      grid-area: a;
    }
    .mosaic-cube2 {
      animation-delay: calc($interval * 3);
      grid-area: b;
    }
    .mosaic-cube3 {
      grid-area: c;
      animation-delay: calc($interval * 4);
    }
    .mosaic-cube4 {
      grid-area: d;
      animation-delay: calc($interval * 1);
    }
    .mosaic-cube5 {
      grid-area: e;
      animation-delay: calc($interval * 2);
    }
    .mosaic-cube6 {
      grid-area: f;
      animation-delay: calc($interval * 3);
    }
    .mosaic-cube7 {
      grid-area: g;
      animation-delay: 0s;
    }
    .mosaic-cube8 {
      grid-area: h;
      animation-delay: calc($interval * 1);
    }
    .mosaic-cube9 {
      grid-area: i;
      animation-delay: calc($interval * 2);
    }
  }
}

@keyframes mosaicAnimate {
  0%,
  70%,
  100% {
    transform: scale(1, 1);
    transform: scale3D(1, 1, 1);
  }
  35% {
    transform: scale(0, 0);
    transform: scale3D(0, 0, 1);
  }
}
