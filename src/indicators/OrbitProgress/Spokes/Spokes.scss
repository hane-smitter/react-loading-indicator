@use "sass:string";
@use "../../../scss/variables" as defaults;

$animationDuration: var(--rli-animation-duration, 1.2s);
$animationFn: var(--rli-animation-function, ease-in-out);
$numOfSpokes: 12;
$numOfSpokesVar: var(--orbit-progress-bars-count, $numOfSpokes);
$degreesInterval: calc(360deg / $numOfSpokes);
$delayInterval: calc($animationDuration / $numOfSpokesVar);
$spokeSize: 1.2em;

// Animation names
$spokesSpinAnim: string.unique-id();

.OP-spokes-rli-bounding-box {
	font-size: defaults.$fontSizer;

	.OP-spokes-indicator {
		width: calc($spokeSize * 4);
		height: calc($spokeSize * 4);
		display: block;
		position: relative;

		// For debugging
		background-color: aquamarine;

		.spoke {
			position: absolute;

			// Dimensions + Centering technique
			height: $spokeSize;
			width: calc($spokeSize / 3);
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			margin: auto auto auto 50%;
			background-color: #1d1d1d;
			border-radius: calc($spokeSize / 5);
			// border-top-right-radius: calc($spokeSize / 4); // Same as width
			opacity: 0;
			animation: $animationDuration $animationFn backwards infinite
				$spokesSpinAnim;
			transform-origin: left center;

			@for $j from 1 through $numOfSpokes {
				$backwardsSpokeNum: calc($numOfSpokes - ($j - 1));
				$spokeIndex: calc($j - 1);
				// $spokeIndex2: calc($backwardsSpokeNum - 1);
				&:nth-of-type(#{$j}) {
					$rotateInclination: calc(#{$spokeIndex} * 360deg / #{$numOfSpokesVar});
					$barsOffset: calc(($spokeSize + ($spokeSize * 0.3)) * -1);

					transform: rotate($rotateInclination) translate(-50%, $barsOffset);
					animation-delay: calc(#{$backwardsSpokeNum} * $delayInterval * -1);
				}
			}
		}
	}
}

@keyframes #{$spokesSpinAnim} {
	from {
		opacity: 1;
	}
	to {
		opacity: 0;
	}
}
