@use "../../../scss/variables" as defaults;

$animationDuration: var(--rli-animation-duration, 2s);
$animationFn: var(--rli-animation-function, ease);

$brick-width: 0.8em;
$spacing: 0.4em;

$brick-width-alignmentX: calc($brick-width + 0.1em);
$brick-width-alignmentY: $brick-width;
$x1: $brick-width-alignmentX;
$x2: calc($brick-width-alignmentX * 2 + $spacing);
$y1: 0;
$y2: calc(($brick-width-alignmentY + $spacing) * -1);

@function brickColor($brickNumber) {
  @if ($brickNumber == 1) {
    @return var(--brick1-color, currentColor);
  } @else if ($brickNumber == 2) {
    @return var(--brick2-color, currentColor);
  } @else if ($brickNumber == 3) {
    @return var(--brick3-color, currentColor);
  } @else {
    @return currentColor;
  }
}

.brick-stack-rli-bounding-box {
  box-sizing: border-box;
  font-size: defaults.$fontSizer;
  display: inline-block;
  color: defaults.$defaultColor;

  .brick-stack-indicator {
    width: calc($brick-width * 2.2 + $spacing);
    height: calc($brick-width * 2.2 + $spacing);
    position: relative;
    display: block;
    margin: 0 auto;

    .three-dot-brick-stack {
      display: inline-block;
      position: absolute;
      bottom: 0;
      left: calc($brick-width * -1);
      width: $brick-width;
      height: $brick-width;
      border-radius: 50%;
      background-color: transparent;
      box-shadow: $x1 $y2 0 0 brickColor(1), $x1 $y1 0 0 brickColor(2), $x2 $y1 0 0 brickColor(3);

      animation-name: stackBricks;
      animation-duration: $animationDuration;
      animation-iteration-count: infinite;
      animation-timing-function: $animationFn;
    }
  }
}

@keyframes stackBricks {
  0% {
    box-shadow: $x1 $y2 0 0 brickColor(1), $x1 $y1 0 0 brickColor(2), $x2 $y1 0 0 brickColor(3);
  }

  8.333% {
    box-shadow: $x2 $y2 0 0 brickColor(1), $x1 $y1 0 0 brickColor(2), $x2 $y1 0 0 brickColor(3);
  }

  16.667% {
    box-shadow: $x2 $y2 0 0 brickColor(1), $x1 $y2 0 0 brickColor(2), $x2 $y1 0 0 brickColor(3);
  }

  25% {
    box-shadow: $x2 $y2 0 0 brickColor(1), $x1 $y2 0 0 brickColor(2), $x1 $y1 0 0 brickColor(3);
  }

  33.333% {
    box-shadow: $x2 $y1 0 0 brickColor(1), $x1 $y2 0 0 brickColor(2), $x1 $y1 0 0 brickColor(3);
  }

  41.667% {
    box-shadow: $x2 $y1 0 0 brickColor(1), $x2 $y2 0 0 brickColor(2), $x1 $y1 0 0 brickColor(3);
  }

  50% {
    box-shadow: $x2 $y1 0 0 brickColor(1), $x2 $y2 0 0 brickColor(2), $x1 $y2 0 0 brickColor(3);
  }

  58.333% {
    box-shadow: $x1 $y1 0 0 brickColor(1), $x2 $y2 0 0 brickColor(2), $x1 $y2 0 0 brickColor(3);
  }

  66.666% {
    box-shadow: $x1 $y1 0 0 brickColor(1), $x2 $y1 0 0 brickColor(2), $x1 $y2 0 0 brickColor(3);
  }

  75% {
    box-shadow: $x1 $y1 0 0 brickColor(1), $x2 $y1 0 0 brickColor(2), $x2 $y2 0 0 brickColor(3);
  }

  83.333% {
    box-shadow: $x1 $y2 0 0 brickColor(1), $x2 $y1 0 0 brickColor(2), $x2 $y2 0 0 brickColor(3);
  }

  91.667% {
    box-shadow: $x1 $y2 0 0 brickColor(1), $x1 $y1 0 0 brickColor(2), $x2 $y2 0 0 brickColor(3);
  }

  100% {
    box-shadow: $x1 $y2 0 0 brickColor(1), $x1 $y1 0 0 brickColor(2), $x2 $y1 0 0 brickColor(3);
  }
}
